import React, { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import jwtDecode from 'jwt-decode';
import '../styles/Button.css';
import '../styles/BoardDetailPage.css';
import NavBar from '../components/NavBar.tsx';
import { getPost, getUser, getComment, postComment, getVote, patchVote } from '../api/api.js';

const AuthDetailPage: React.FC = () => {
  const { postId, userId, voteId } = useParams<{ postId: string; userId: string; voteId: string }>();

  const [post, setPost] = useState<any>({});
  const [user, setUser] = useState<any>({});

  const [loggedInUserId, setLoggedInUserId] = useState<any>({});

  const accessToken = localStorage.getItem('accessToken');
  useEffect(() => {
    if (accessToken) {
      setIsLoggedIn(true);
      const decodedToken: any = jwtDecode(accessToken);
      setLoggedInUserId(decodedToken.userId);
    } else {
      setIsLoggedIn(false);
    }
  }, [accessToken]);

  const [vote, setVote] = useState<any>({});
  const [alreadyLiked, setAlreadyLiked] = useState<boolean>(false);
  const [liked, setLiked] = useState(alreadyLiked);

  const [commentText, setCommentText] = useState('');

  const [allComments, setAllComments] = useState<any[]>([]);
  const [visibleComments, setVisibleComments] = useState<any[]>([]);

  const intersectionRef = useRef<HTMLDivElement | null>(null);

  const [isLoggedIn, setIsLoggedIn] = useState(!accessToken);

  useEffect(() => {
    if (accessToken) {
      setIsLoggedIn(true);
      return;
    }

    setIsLoggedIn(false);
  }, [accessToken]);

  useEffect(() => {
    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú ÏÇ¨Ïö©ÏûêÏùò Ï¢ãÏïÑÏöî Ïó¨Î∂ÄÎ•º Í∞ÄÏ†∏Ïò¥
    const savedLikeState = localStorage.getItem(`alreadyLikeState_${postId}_${userId}`);
    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•Îêú Í∞íÏù¥ ÏûàÎäî Í≤ΩÏö∞ Ìï¥Îãπ Í∞íÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ alreadyÏóê ÏÉÅÌÉúÎ•º ÏÑ§Ï†ï
    if (savedLikeState !== null) {
      setAlreadyLiked(JSON.parse(savedLikeState));
    }

    // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú ÏÑúÎ≤ÑÏóêÏÑú Ìà¨Ìëú Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¥
    getVote(postId, userId)
      .then(response => {
        if (response.status === 200) {
          const voteData = response.data;
          console.log(voteData);

          // ÏÑúÎ≤ÑÏóêÏÑú Í∞ÄÏ†∏Ïò® Ìà¨Ìëú Ï†ïÎ≥¥Î•º vote ÏÉÅÌÉúÏóê Ï†ÄÏû•
          setVote(voteData);
        }
      })
      .catch(error => {
        console.error('Ìà¨Ìëú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
      });
  }, [postId, userId]);

  const handleVoteClick = async () => {
    try {
      // API ÏöîÏ≤≠ Î≥¥ÎÇ¥Í∏∞ (patchVote Ìï®ÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏöîÏ≤≠ Î≥¥ÎÉÑ)
      const response = await patchVote(postId, userId, voteId);
      console.log('patchÌïúÌõÑ: ', response.data);

      // API ÏöîÏ≤≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêú Í≤ΩÏö∞ÏóêÎßå UIÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
      if (response.status === 200) {
        // const updatedVoteCount = response.data.voteCount;
        const updatedVoteCount = liked ? vote.voteCount - 1 : vote.voteCount + 1;
        setVote({
          ...vote, // Ïù¥Ï†Ñ vote Í∞ùÏ≤¥ ÎÇ¥Ïö©ÏùÑ Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
          voteCount: updatedVoteCount, // voteCountÎßå ÏóÖÎç∞Ïù¥Ìä∏
        });
        console.log(vote.voteCount);

        // Ïù¥ÎØ∏ Ï¢ãÏïÑÏöîÎ•º Ìïú ÏÉÅÌÉúÏòÄÎã§Î©¥ Ï¢ãÏïÑÏöîÎ•º Ìï¥Ï†úÌïòÍ≥†, Í∑∏ Î∞òÎåÄÏùò Í≤ΩÏö∞ÏóêÎäî Ï¢ãÏïÑÏöîÎ•º ÌôúÏÑ±ÌôîÌï©ÎãàÎã§.
        if (alreadyLiked) {
          setAlreadyLiked(false);
        } else {
          setAlreadyLiked(true);
        }

        setLiked(!liked);

        // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï¢ãÏïÑÏöî ÏÉÅÌÉú Ï†ÄÏû•
        localStorage.setItem(`alreadyLikeState_${postId}_${userId}`, JSON.stringify(alreadyLiked));
      } else {
        console.error('Ï¢ãÏïÑÏöî Î≤ÑÌäº Í∏∞Îä• Ïò§Î•ò');
      }
    } catch (error) {
      console.error('Ï¢ãÏïÑÏöî Ïò§Î•ò', error);
    }
  };

  const handleCommentTextChange = event => {
    setCommentText(event.target.value);
  };

  const handleSubmitComment = async () => {
    if (commentText.trim() === '') {
      return;
    }
    if (commentText.length > 500) {
      alert('ÎåìÍ∏ÄÏùÄ 500Ïûê Ïù¥ÎÇ¥Î°ú ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    try {
      // ÎåìÍ∏Ä ÏûëÏÑ± API Ìò∏Ï∂ú
      const response = await postComment(postId, loggedInUserId, commentText);
      console.log('ÎåìÍ∏Ä ÏûëÏÑ± ÏôÑÎ£å:', response.data);
      setCommentText('');

      // ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®
      window.location.reload();
    } catch (error) {
      console.error('ÎåìÍ∏Ä ÏûëÏÑ± Ïò§Î•ò:', error);
    }
  };

  useEffect(() => {
    // Ìè¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    getPost(postId)
      .then(response => {
        setPost(response.data);
      })
      .catch(error => {
        console.error('Ìè¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
      });

    // Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    getUser(userId)
      .then(response => {
        console.log(response.data);
        setUser(response.data);
      })
      .catch(error => {
        console.error('Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
      });

    // ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    getComment(postId)
      .then(response => {
        const sortedComments = response.data.sort((a: { createdAt: string }, b: { createdAt: string }) => {
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        });
        const commentsWithUser = sortedComments.map(comment => ({
          ...comment,
          user: null,
        }));

        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò® ÌõÑÏóê ÎåìÍ∏Ä Í∞ùÏ≤¥Î•º Í∞±Ïã†ÌïòÍ≥† ÏÉÅÌÉúÏóê ÏÑ§Ï†ï
        const updateUserComments = async () => {
          for (let i = 0; i < commentsWithUser.length; i++) {
            const comment = commentsWithUser[i];
            try {
              const userResponse = await getUser(comment.userId);
              const user = userResponse.data;
              const updatedComment = {
                ...comment,
                user,
              };
              commentsWithUser[i] = updatedComment;
            } catch (error) {
              console.error('ÎåìÍ∏Ä ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
            }
          }
          setVisibleComments(commentsWithUser.slice(0, 10));
        };

        updateUserComments();
      })
      .catch(error => {
        console.error('ÎåìÍ∏Ä Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:', error);
      });
  }, [postId, userId]);

  useEffect(() => {
    const handleIntersect = entries => {
      if (entries[0].isIntersecting) {
        setTimeout(() => {
          const endVisibleIndex = visibleComments.length;
          const newVisibleComments = [...visibleComments, ...allComments.slice(endVisibleIndex, endVisibleIndex + 10)];
          setVisibleComments(newVisibleComments);
        });
      }
    };

    const observer = new IntersectionObserver(handleIntersect, {
      root: null,
      rootMargin: '0px',
      threshold: 0.1,
    });

    if (intersectionRef.current) {
      observer.observe(intersectionRef.current);
    }

    return () => {
      observer.disconnect();
    };
  }, [allComments, visibleComments]);

  return (
    <>
      <NavBar />
      <div className="page_container">
        <button className="custom_board_button cancel_button">Ïù∏Ï¶ù Í≤åÏãúÌåê</button>
        <div className="auth_detail_container">
          <div className="auth_detail_container_image">
            <img src={post.imageUrl} alt={`${post.postId}`} />
          </div>
          <div className="auth_detail_container_post">
            <div className="post_detail_header">
              <div>
                <h3 className="post_detail_title">{post.title}</h3>
                <p>
                  {user.grade} {user.userName}
                </p>
              </div>
              <p>{new Date(post.createdAt).toLocaleDateString()}</p>
            </div>
            <p className="post_detail_content_auth">{post.body}</p>
            {/* <button onClick={handleVoteClick} className='vote_button'>
              {liked ? `‚ù§Ô∏è ${vote.voteCount}` : `ü§ç ${vote.voteCount}`}
            </button> */}
          </div>
        </div>

        <div className="free_detail_container">
          {isLoggedIn && (
            <div className="detail_comment_container">
              <input
                className="comment_input"
                type="text"
                placeholder="ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî."
                value={commentText}
                onChange={handleCommentTextChange}
              />
              <button className="comment_button" onClick={handleSubmitComment}>
                ÏûëÏÑ±
              </button>
            </div>
          )}
          {visibleComments.map(comment => (
            <div key={comment.commentId} className="post_detail_header">
              <div>
                <p>
                  {comment.user.grade} {comment.user.userName}
                </p>
                <p>{comment.body}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
};

export default AuthDetailPage;
